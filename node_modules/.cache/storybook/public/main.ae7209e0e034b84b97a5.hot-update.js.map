{"version":3,"file":"main.ae7209e0e034b84b97a5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAQA;AAEA;AACA;AADA;AAAA;AAAA;AA6EA;AAuBA;AAaA;AAYA;AAYA;AAaA;AACA;AACA;AAWA;AA+BA;AAWA;AAWA;AAyBA;AAYA;AAeA;AAQA;AAaA;AAEA;AACA;AAmBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAklkBA;AAAA;;;AAEA;AAmBA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AAaA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAiBA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AASA;AAAA;;;AAGA;AASA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AAUA;AAAA;;;AAMA;AAQA;AAAA;AAGA;AAAA;AADA;AAOA;AAAA;;;AAEA;AAWA;AAAA;;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AAFA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA3WA;AANA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA","sources":["webpack://design-system/./projects/mya-controls/src/lib/table/components/table.component.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return */\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {MatSort} from '@angular/material/sort';\nimport {FormBuilder} from '@angular/forms';\nimport {fromEvent, Observable} from 'rxjs';\nimport {debounceTime, map, startWith, takeUntil} from 'rxjs/operators';\nimport {format, parseISO} from 'date-fns';\n\nimport {\n  ColumnsType,\n  MyaTableService,\n  TableColumns, TableDefault\n} from '@mya-controls/table';\nimport {BaseDirective} from '@mya-controls/core';\n// For some reason if we use shorthand path on these directives ng test will not work\nimport {ColumnCustomDirective} from '../directives/column-custom.directive';\nimport {ColumnCustomHeaderDirective} from '../directives/column-custom-header.directive';\n\n@Component({\n  selector: 'mya-table',\n  template: (require('./table.component.html').default || require('./table.component.html')).length ? (require('./table.component.html').default || require('./table.component.html')) : '',\n  styles: [(require('./table.component.scss').default || require('./table.component.scss')).length ? (require('./table.component.scss').default || require('./table.component.scss')) : ''],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableComponent extends BaseDirective implements OnInit, AfterContentInit, AfterViewChecked, OnDestroy {\n\n  constructor(private formBuilder: FormBuilder, private elementRef: ElementRef, private myAdminTableService: MyaTableService) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    if ((!this._customColumnsArray || this._customColumnsArray.length === 0) && this.customColumns && this.customColumns.length > 0) {\n      this.cacheRowValues();\n    }\n\n    this._customColumnHeadersArray = this.customColumnHeaders?.toArray() ?? [];\n    this.setCustomHeaderBindings();\n  }\n\n  ngAfterViewChecked(): void {\n    this.calculatePageSize();\n  }\n\n  ngOnInit(): void {\n    this._data = [];\n    this._selection.clear();\n    if (this.dataChange) {\n      this.dataChange.pipe(takeUntil(this.ngUnsubscribe)).subscribe((row) => {\n        if (row) {\n          this.cacheRowValues(row);\n        } else {\n          this.cacheRowValues();\n        }\n      });\n    } else {\n      if (this.editFormTemplate && isDevMode()) {\n        console.warn('rowChanged must be defined if you are using an edit form!');\n      }\n    }\n\n    this.subscribeToCloseEditForm();\n    const checkScreenSize = () => document.body.offsetWidth < 1024;\n    const screenSizeChanged$ = fromEvent(window, 'resize').pipe(debounceTime(500), map(checkScreenSize), takeUntil(this.ngUnsubscribe));\n    this._isScreenSmall$ = screenSizeChanged$.pipe(startWith(checkScreenSize()), takeUntil(this.ngUnsubscribe));\n    const screenSizeChangedPaging$ = fromEvent(window, 'resize').pipe(debounceTime(1000), takeUntil(this.ngUnsubscribe));\n    screenSizeChangedPaging$.subscribe(() => {\n      if (this._isTableView) {\n        this.myAdminTableService.calculationTableSizeSet = false;\n        this.calculatePageSize();\n      }\n    });\n\n    //selection change event\n    /*this.selectionChange.pipe(takeUntil(this.ngUnsubscribe)).subscribe((row) => {\n      this.selectionHasValue = row.hasValue\n    });*/\n  }\n\n  ngOnDestroy(): void {\n    this.myAdminTableService.calculationTableSizeSet = false;\n  }\n\n  //Input Properties\n  /* Configured column values for table*/\n  @Input() get columnsToDisplay(): string[] {\n    return this.columns.filter((c: TableColumns) => c.isHidden !== true).map((c: TableColumns) => c.binding);\n  }\n  set columnsToDisplay(val: any) {\n    if (val && val.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.columns = val.filter((c: TableColumns) => c.isHidden !== true);\n      this._listViewItems = this.columns.filter((x: TableColumns) => x.isListView === true);\n      if (this._listViewItems.length > 5 && isDevMode()) {\n        this.showErrorView();\n        this._showListViewError = true;\n      }\n      const listViewTitle = this.columns.filter((x: TableColumns) => x.isTitleProperty === true);\n      if (listViewTitle.length > 1 && isDevMode()) {\n        this.showErrorView();\n        this._showListTitleError = true;\n      }\n    }\n  }\n  _columnsToDisplayListView = ['ListColumn'];\n\n  @Input() public get columns(): TableColumns[] {\n    return this._columns.filter((c: TableColumns) => c.isHidden !== true);\n  }\n  set columns(val: TableColumns[]) {\n    if (val) {\n      this._columns = val;\n    }\n  }\n  _columns!: TableColumns[];\n  _listViewItems!: TableColumns[];\n\n  /* Configured page size for table row items*/\n  @Input() get pageSize(): number {\n    return this._pageSize;\n  }\n  set pageSize(val: number) {\n    if (!this._isAutoPageSize) {\n      this._pageSize = val;\n      this.setPaginator(val);\n    }\n  }\n  protected _pageSize = 10;\n\n  /* Configured page index for table row items*/\n  @Input() get pageIndex(): number {\n    return this._pageIndex;\n  }\n  set pageindex(val: number) {\n    this._pageIndex = val;\n    this._dataSource.paginator = this._paginator;\n    if (val && this._dataSource.paginator?.pageIndex) {\n      this._dataSource.paginator.pageIndex = val;\n    }\n  }\n  protected _pageIndex = 0;\n\n  /* Configured autoPageSize for table row items*/\n  @Input() get autoPageSize(): boolean {\n    return this._isAutoPageSize;\n  }\n  set autoPageSize(val: boolean) {\n    if (val) {\n      this._isAutoPageSize = val;\n      this.myAdminTableService.setAutoTableSize(val);\n    }\n  }\n  _isAutoPageSize = false;\n\n  //TODO this should be removed\n  /* Configured hide page size for table*/\n  @Input() get hidePageSize(): boolean {\n    return this._hidePageSize;\n  }\n  set hidePageSize(val: boolean) {\n    if (val) {\n      this._hidePageSize = val;\n    }\n  }\n  protected _hidePageSize = true;\n\n  /* Table data values*/\n  @Input() get datasource(): any {\n    return this._dataSource.data;\n  }\n  set datasource(val: any) {\n    if (val) {\n      this._dataSource.data = val;\n      this.cacheRowValues();\n      this._selection.clear();\n    }\n  }\n  _data: any = [];\n  _dataSource = new MatTableDataSource<any>(this._data);\n  _tempData = new MatTableDataSource<any>();\n\n  /* Text displayed when no data loaded in Table*/\n  @Input() get emptyTableText(): string {\n    return this._emptyTableText;\n  }\n  set emptyTableText(val: string) {\n    if (val) {\n      this._emptyTableText = val;\n    }\n  }\n  _emptyTableText: string = 'No Data Loaded';\n\n  //TODO this should be removed\n  /* Text filtered datasource for data in Table */\n  @Input() get filteredDataSource() {\n    return this._dataSource.filteredData;\n  }\n  set filteredDataSource(val: any) {\n    if (val) {\n      // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      val.forEach((row) =>\n        this._dataSource.filteredData.map((item) => {\n          if (item.id === row.id) {\n            this.selectRow(item);\n          }\n        })\n      );\n    }\n  }\n\n  //TODO this should be removed\n  /* setting this to true will enable the ability to show a form in mobile view*/\n  @Input() get mobileForm(): boolean {\n    return this._showEditFormMobile;\n  }\n  set mobileForm(val: boolean) {\n    if (val) {\n      this._showEditFormMobile = val;\n    }\n  }\n  _showEditFormMobile = false;\n\n  /* Text displayed when editing item in list view*/\n  @Input() get pageTitle(): any {\n    return this._listViewPageTitle;\n  }\n  set pageTitle(val: string) {\n    if (val) {\n      this._listViewPageTitle = val;\n    }\n  }\n  _listViewPageTitle: string = '';\n\n  /* hide list view overrides double click */\n  @Input() get disableListView(): boolean {\n    return this._disableListView;\n  }\n  set disableListView(val: boolean) {\n    if (val) {\n      this._disableListView = val;\n    }\n  }\n  protected _disableListView = false;\n\n  //TODO event emitter\n  @Input() get buttonClickListView(): boolean {\n    //TODO ASK JZ\n    return this._disableListView;\n  }\n  set buttonClickListView(val: any) {\n    if (val) {\n      this._buttonClick = val;\n      this.showListView();\n    }\n  }\n\n  /* Allow multiple rows to be selected, default is false */\n  @Input() get multiSelect() {\n    return this._isMultiSelect;\n  }\n  set multiSelect(val: boolean) {\n    this._selection.clear();\n    if (val) {\n      this._originalMultiSelectState = val;\n      this._isMultiSelect = val;\n    }\n  }\n  _isMultiSelect = false;\n\n  /* select all rows in table */\n  @Input() get selectAll(): boolean {\n    return this._isSelectAll;\n  }\n  set selectAll(val: boolean) {\n    if (val) {\n      this._isSelectAll = val;\n      this.selectAllRows();\n    }\n  }\n  protected _isSelectAll = true;\n\n  /* Define custom table name for table default is a random GUID, this is used to avoid 2 table implementation on page with same columns. */\n  @Input() get tableName(): string {\n    if (this._localTableName === undefined) {\n      return this._localTableName;\n    } else {\n      return this._localTableName;\n    }\n  }\n  set tableName(val: string) {\n    if (val) {\n      this._localTableName = val;\n    }\n  }\n  _localTableName: string = this.generateUUID();\n\n  @Input() get tableDefaultValues(): TableDefault {\n    return this._tableDefaultValues;\n  }\n  set tableDefaultValues(values: TableDefault) {\n    this._tableDefaultValues = values;\n  }\n  _tableDefaultValues: TableDefault  = { closeText : 'Close', notAvailableText : 'Not Available' };\n\n  /* Open selected item from table rows */\n  @Input() get openSelectedValue() {\n    return this._selectedValue;\n  }\n  set openSelectedValue(val: any) {\n    if (val) {\n      this._selectedValue = val;\n      this._selection.toggle(this._selectedValue);\n      this.showListView();\n    }\n  }\n  protected _selectedValue = null;\n\n  /* Used to notify data cache of date changes */\n  @Input() public dataChange: Observable<any>|null = null;\n\n  /* Edit form template for editing row item */\n  // @ts-ignore\n  @Input() public editFormTemplate: TemplateRef<any>;\n  /* Action bar template for table */\n  // @ts-ignore\n  @Input() public actionToolbarTemplate: TemplateRef<any>;\n  /* Filter control form template for table data */\n  // @ts-ignore\n  @Input() public filterTemplate: TemplateRef<any>;\n  /* Button Collection template for table */\n  // @ts-ignore\n  @Input() public buttonColTemplate: TemplateRef<any>;\n  /* Checkbox Collection template for table */\n  // @ts-ignore\n  @Input() public checkBoxColTemplate: TemplateRef<any>;\n\n\n  /*  */\n  @Input() hasSelectAllCheckbox = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() noSortingIcon = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() circleIcon = false;\n\n  /*  */\n  @Input() isSecondaryTable = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() noSelection = false;\n\n  /* Used to close form on custom action */\n  @Input() public closeListView: Observable<any>|null = null;\n\n  //TODO rename to close dataLoading and change to event\n  /* Used to show loading indication */\n  @Input() dataLoading: boolean = false;\n\n  @Input() public sortListView = false;\n\n  /* Emitted when a selection has changed from table row */\n  @Output() readonly selectionChange: EventEmitter<any> = new EventEmitter<any>();\n  /* Emitted when a filter value has changed table row */\n  @Output() readonly updateFilterPredicateChange: EventEmitter<MatTableDataSource<any>> = new EventEmitter<MatTableDataSource<any>>();\n  /* Emitted when a multi selection has changed on table rows */\n  @Output() readonly multiSelectionChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n  /* Emitted when a page index has changed */\n  @Output() readonly pageChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n  @ViewChild(MatPaginator) set matPaginator(mp: MatPaginator) {\n    this._paginator = mp;\n    this._dataSource.paginator = this._paginator;\n    this.setDataSourceAttributes();\n  }\n  @ViewChild(MatSort) set matSort(ms: MatSort) {\n    this._sort = ms;\n    this._dataSource.sort = this.noSortingIcon ? null : ms;\n    this.setDataSourceAttributes();\n  }\n  @ViewChild('paginator', { static: true })\n\n  @ContentChildren(ColumnCustomDirective) customColumns!: QueryList<ColumnCustomDirective>;\n  @ContentChildren(ColumnCustomHeaderDirective) customColumnHeaders!: QueryList<ColumnCustomHeaderDirective>;\n\n  _isTableView = true;\n  _isListView = false;\n  _isErrorView = false;\n  _showListViewError = false;\n  _showListTitleError = false;\n\n  _buttonClick: any; // value of the button click event passed in by parent component\n  _selection = new SelectionModel<any>(true, []);\n  _lastSelectedRow: [] | undefined; // this is to save the last selected row, so going from table to list view keeps the selected value.\n  _isScreenSmall$!: Observable<boolean>;\n  _originalMultiSelectState = false; //this is the original value passed in by the parent component, this should never change.\n\n  _customColumnsArray!: any[];\n  _customColumnHeadersArray!: any[];\n\n  _paginator!: MatPaginator;\n\n  private _sort!: MatSort;\n\n  selectedItem: any;\n  selectionHasValue: boolean = false;\n  selectionChecked: boolean = false;\n  allSelectionChecked: boolean = false;\n\n  clearSelected(): void {\n    this._dataSource.data = [];\n    this._selection.clear();\n  }\n\n  stringToPath(str: string): string[] {\n    return str.split('.');\n  }\n\n  subscribeToCloseEditForm(): void {\n    if (this.closeListView) {\n      this.closeListView.pipe(takeUntil(this.ngUnsubscribe)).subscribe(() => {\n        this.cancel();\n      });\n    }\n  }\n\n  getVal(columnName: string, row: any): any {\n    if (!row) {\n      return undefined;\n    }\n    if (!columnName) {\n      return '';\n    }\n    const properties = Array.isArray(columnName) ? columnName : columnName.split('.');\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-member-access\n    return properties.reduce((prev, curr) => prev && prev[curr], row);\n  }\n\n  selectedRowChange(_selection: any): void {\n    if (!this.noSelection) {\n      this.selectRow(_selection);\n      this.selectionChange.emit(_selection);\n    }\n  }\n\n  selectRow(row: any): void {\n    if (!this.noSelection) {\n      if (row && !this.multiSelect) {\n        if (this._selection.selected.length === 1 && this._selection.selected[0] !== row) {\n          this._selection.toggle(this._selection.selected[0]);\n        }\n        this._lastSelectedRow = row;\n        this._selection.toggle(row);\n      } else if (row && this.multiSelect) {\n        this._lastSelectedRow = row;\n        this._selection.toggle(row);\n      }\n\n      this.multiSelectionChange.emit(this._selection.selected);\n    }\n  }\n\n  selectAllRows(): void {\n    this.checkSelected() ? this._selection.clear() : this._dataSource.filteredData.forEach((row) => this._selection.select(row));\n    this.multiSelectionChange.emit(this._selection.selected);\n  }\n\n  checkSelected(): boolean {\n    const numFiltered = this._dataSource.filteredData.length;\n    const numSelected = this._selection.selected.length;\n    return numSelected === numFiltered;\n  }\n\n  setDataSourceAttributes(): void {\n    this._dataSource.paginator = this._paginator;\n    this._dataSource.sort = this.noSortingIcon ? null : this._sort;\n    this._dataSource.sortingDataAccessor = (item, property) => {\n      return property.split('.').reduce((o, p) => o && o[p], item);\n    };\n    this.updateFilterPredicateChange.emit(this._dataSource);\n  }\n\n  changeTableLayout(row: any): void {\n    this.selectionChange.emit(row);\n    this.showListView();\n  }\n\n  showErrorView(): void {\n    if (isDevMode()) {\n      this._isErrorView = true;\n      this._isListView = false;\n      this._isTableView = false;\n    }\n  }\n\n  showListView(): void {\n    if (!this._disableListView) {\n      this._isErrorView = false;\n      this._isListView = true;\n      this._isTableView = false;\n      if (this._originalMultiSelectState) {\n        this._selection.clear();\n        this._selection.toggle(this._lastSelectedRow);\n        this._isMultiSelect = false;\n      } else {\n        this._selection.toggle(this._lastSelectedRow);\n      }\n      this._tempData.data = this._dataSource.data;\n      const selected = this._selection.selected[0];\n      if (selected) {\n        this._dataSource.data = [selected, ...this._dataSource.data.filter((item) => item !== selected)];\n      }\n    }\n  }\n\n  showTableView(): void {\n    this._dataSource.data = this._tempData.data;\n    if (this._originalMultiSelectState) {\n      this._isErrorView = false;\n      this._isMultiSelect = true;\n      this._isListView = false;\n      this._isTableView = true;\n    } else {\n      this._isErrorView = false;\n      this._isListView = false;\n      this._isTableView = true;\n    }\n  }\n\n  cancel(): void {\n    this.showTableView();\n    this._selection.clear();\n    this._selection.deselect();\n    this.selectionChange.emit(null);\n  }\n\n  selectAndView(row: any): void {\n    this._lastSelectedRow = row;\n    this.selectionChange.emit(row);\n    this.showListView();\n  }\n\n  trackByColumn(index: number, column: TableColumns): string {\n    return column.columnName + column.type;\n  }\n\n  trackByListView(index: number, column: TableColumns): string {\n    return column.columnName + column.type;\n  }\n\n  onPage(event: any): void {\n    this.pageChange.emit(event);\n  }\n\n  private cacheRowValues(row: any = null): void {\n    //this._customColumnsArray = this.customColumns?.toArray() ?? [];\n    if (row) {\n      this.createCacheBindings(row);\n    } else {\n      for (const dataRow of this._dataSource.data) {\n        this.createCacheBindings(dataRow);\n      }\n    }\n  }\n\n  private createCacheBindings(row: any): void {\n    const columnBindings: any = {};\n    this.setColumnBindings(columnBindings, row);\n    this.setCustomTitleBindings(columnBindings);\n\n    row[this.tableName] = columnBindings;\n  }\n\n  private setColumnBindings(columnBindings: any, row: any) {\n    if (!this.columns) {\n      return;\n    }\n\n    for (const column of this.columns) {\n      this.setColumnBinding(columnBindings, row, column);\n    }\n  }\n\n  private setColumnBinding(columnBindings: any, row: any, column: any) {\n    columnBindings[column.binding] = this.getVal(column.binding, row);\n\n    if (column.type == ColumnsType.Date) {\n      const date = parseISO(this.getVal(column.binding, row));\n      if (!isNaN(<any>date)) {\n        columnBindings[column.binding] = format(date, column.dateFormat ?? 'MM/dd/yyyy HH:mm:ss');\n      }\n    }\n\n    if (column.bindingListView) {\n      columnBindings[column.bindingListView] = this.getVal(column.bindingListView, row);\n    }\n\n    if (this._customColumnsArray) {\n      const customIndex = this._customColumnsArray.findIndex((c) => c.column === column.binding);\n      if (customIndex > -1) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        columnBindings[`${column.binding}-custom`] = customIndex;\n      }\n    }\n  }\n\n  private setCustomTitleBindings(columnBindings: any) {\n    if (this._customColumnsArray) {\n      const titlePropertyIndex = this._customColumnsArray.findIndex((c) => c.column === 'titleProperty');\n      if (titlePropertyIndex > -1) {\n        columnBindings['titleProperty'] = titlePropertyIndex;\n      }\n    }\n  }\n\n  private setCustomHeaderBindings() {\n    if (this._customColumnHeadersArray) {\n      for (const column of this.columns) {\n        const customHeaderIndex = this._customColumnHeadersArray.findIndex((c) => c.column === column.binding);\n        if (customHeaderIndex > -1) {\n          column.headerIndex = customHeaderIndex;\n        }\n      }\n    }\n  }\n\n  //This is a Beta Feature that needs some more calculation logic when tables are not loaded without Toolbars and center aligned.\n  private calculatePageSize() {\n    if (this._isAutoPageSize && !this.myAdminTableService.calculationTableSizeSet && this.elementRef.nativeElement.firstElementChild !== undefined && this.elementRef.nativeElement.firstElementChild !== null && this.elementRef.nativeElement.firstElementChild.scrollHeight > 0) {\n      this.myAdminTableService.calculationTableSizeSet = true;\n      const contentTableHeight = this.elementRef.nativeElement.firstElementChild.scrollHeight;\n      const allowed = Math.round((contentTableHeight / 64) * 0.87);\n      this.pageSize = Math.floor(allowed - (allowed % 2));\n      this.setPaginator(this._pageSize);\n    }\n  }\n\n  private setPaginator(val: number) {\n    if (this._paginator) {\n      this._dataSource.paginator = this._paginator;\n      if (val && this._dataSource.paginator?.pageSize) {\n        this._dataSource.paginator.pageSize = val;\n      }\n    } else if (val && this._dataSource.paginator?.pageSize) {\n      this._dataSource.paginator.pageSize = val;\n    }\n  }\n\n  private generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      // tslint:disable-next-line:no-bitwise\n      const r = (Math.random() * 16) | 0,\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n"],"names":[],"sourceRoot":""}