{"version":3,"file":"main.e1935f2894d5e72815bb.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAaA;AAAA;AAAA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;;ACfA;AACA;AAMA;AAAA;AACA;AAMA;AAJA;AACA;AACA;AACA;AACA;AAPA;AAJA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;ACAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAJA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;ACNA;;;;;;;;;;;;;;;;;;ACAA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAEA;AACA;AADA;AAAA;AAAA;AAwDA;AA0CA;AAaA;AAYA;AAYA;AAaA;AACA;AACA;AAWA;AA8BA;AAWA;AAWA;AAyBA;AAYA;AAeA;AAQA;AAaA;AAuBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAlXA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAyjBA;AAAA;;;AAEA;AAGA;AAAA;;;AAEA;AAiBA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AAaA;AAAA;;;AAEA;AAUA;AAAA;;;AAEA;AAgBA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AASA;AAAA;;;AAEA;AASA;AAAA;;;AAGA;AASA;AAAA;;;AAEA;AAWA;AAAA;;;AAEA;AAUA;AAAA;;;AAMA;AAQA;AAAA;AAGA;AAAA;AADA;AAOA;AAAA;;;AAEA;AAYA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAGA;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAIA;AAGA;AAFA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA1WA;AANA;AACA;AACA;AACA;AACA;AAIA;AAFA;AAAA;;;;;;;;;;;;;;;;;AC1BA;AAKA;AAIA;AAHA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AAHA;AAHA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;ACLA;AAKA;AAIA;AAHA;AAAA;;AAAA;AAEA;AAAA;;AAAA;AAHA;AAHA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACTA;AACA;AAGA;AAAA;AAEA;AAEA;AACA;AAKA;AAHA;AACA;AACA;AACA;AAVA;AADA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA2BA;AAAA;AAAA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;ACvCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAEA;AAAA;AACA;AACA;AACA;AAYA;AAEA;AAAA;;;;;;;;;;;;;;ACnBA;AAAA;AACA;AACA;AACA;AAAA","sources":["webpack://design-system/./projects/mya-controls/src/lib/table/components/table.component.html","webpack://design-system/./stories/table/table.stories.ts","webpack://design-system/./projects/mya-controls/src/lib/core/core.module.ts","webpack://design-system/./projects/mya-controls/src/lib/core/directives/base-directive.ts","webpack://design-system/./projects/mya-controls/src/lib/core/directives/index.ts","webpack://design-system/./projects/mya-controls/src/lib/core/directives/public-api.ts","webpack://design-system/./projects/mya-controls/src/lib/core/directives/stringDecode.ts","webpack://design-system/./projects/mya-controls/src/lib/core/index.ts","webpack://design-system/./projects/mya-controls/src/lib/core/public-api.ts","webpack://design-system/./projects/mya-controls/src/lib/table/components/table.component.ts","webpack://design-system/./projects/mya-controls/src/lib/table/directives/table-column-custom-header.directive.ts","webpack://design-system/./projects/mya-controls/src/lib/table/directives/table-column-custom.directive.ts","webpack://design-system/./projects/mya-controls/src/lib/table/index.ts","webpack://design-system/./projects/mya-controls/src/lib/table/public-api.ts","webpack://design-system/./projects/mya-controls/src/lib/table/services/table.service.ts","webpack://design-system/./projects/mya-controls/src/lib/table/table.module.ts","webpack://design-system/./projects/mya-controls/src/lib/table/types/columns-type.ts","webpack://design-system/./projects/mya-controls/src/lib/table/types/mya-table-columns.ts","webpack://design-system/./projects/mya-controls/src/lib/table/types/tableDefault.ts"],"sourcesContent":["export default \"<div fxFill fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\" [class.table-view-container]=\\\"_isTableView\\\" [class.list-view-container]=\\\"_isListView\\\">\\n  <ng-container *ngIf=\\\"_isTableView\\\">\\n    <div fxHide.lt-md=\\\"true\\\" fxFlex=\\\"1 1 100%\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\">\\n      <div fxHide.lt-md=\\\"{{ _selection.hasValue() }}\\\">\\n        <ng-container *ngTemplateOutlet=\\\"filterRow\\\"></ng-container>\\n      </div>\\n      <ng-container *ngTemplateOutlet=\\\"dataLoading ? dataLoadingSpinner : myadminTable\\\"></ng-container>\\n    </div>\\n    <div *ngIf=\\\"_isScreenSmall$ | async\\\" fxHide.gt-sm=\\\"true\\\" fxFlex=\\\"1 1 100%\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start stretch\\\">\\n      <div fxHide.lt-md=\\\"{{ _selection.hasValue() }}\\\">\\n        <ng-container *ngTemplateOutlet=\\\"filterRow\\\"></ng-container>\\n      </div>\\n      <ng-container *ngIf=\\\"!dataLoading && _showEditFormMobile\\\">\\n        <ng-container *ngTemplateOutlet=\\\"_selection.selected.length ? editFormContainer : myadminListView\\\"></ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"!dataLoading && !_showEditFormMobile\\\">\\n        <ng-container *ngTemplateOutlet=\\\"_selection.selected.length ? myadminListView : myadminListView\\\"></ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"dataLoading\\\">\\n        <ng-container *ngTemplateOutlet=\\\"dataLoadingSpinner\\\"></ng-container>\\n      </ng-container>\\n    </div>\\n    <div *ngIf=\\\"_dataSource.data.length === 0 && _emptyTableText\\\" fxFill fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start start\\\" class=\\\"emptyTableText\\\">\\n      {{ _emptyTableText }}\\n    </div>\\n  </ng-container>\\n\\n  <ng-container *ngIf=\\\"_isListView\\\">\\n    <div fxHide.lt-md=\\\"{{ _selection.hasValue()}}\\\">\\n      <ng-container *ngTemplateOutlet=\\\"filterRow\\\"></ng-container>\\n    </div>\\n    <div fxHide.lt-md=\\\"true\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row\\\" class=\\\"scrollDiv\\\">\\n      <div fxFlex=\\\"32.2\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"stretch stretch\\\">\\n        <ng-container *ngTemplateOutlet=\\\"dataLoading ? dataLoadingSpinner : myadminListView\\\"></ng-container>\\n      </div>\\n      <div fxFlex=\\\"67.8\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"stretch stretch\\\" class=\\\"edit-form-box-shadow\\\">\\n        <ng-container *ngTemplateOutlet=\\\"editFormContainer\\\"></ng-container>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"_isScreenSmall$ | async\\\" fxHide.gt-sm=\\\"true\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"stretch stretch\\\" class=\\\"scrollDiv\\\">\\n      <ng-container *ngIf=\\\"!dataLoading\\\">\\n        <ng-container *ngTemplateOutlet=\\\"_selection.hasValue() ? editFormContainer : myadminListView\\\"></ng-container>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"dataLoading\\\">\\n        <ng-container *ngTemplateOutlet=\\\"dataLoadingSpinner\\\"></ng-container>\\n      </ng-container>\\n    </div>\\n  </ng-container>\\n</div>\\n\\n<div *ngIf=\\\"_isErrorView\\\" fxFill fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n  <ng-container *ngTemplateOutlet=\\\"errorView\\\"></ng-container>\\n</div>\\n\\n<ng-template #dataLoadingSpinner>\\n  <div fxFill fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n    <mat-spinner [diameter]=\\\"42\\\"></mat-spinner>\\n  </div>\\n</ng-template>\\n\\n<ng-template #myadminTable>\\n  <div fxFlex=\\\"1 1 100%\\\" class=\\\"table-scroll-container\\\" [ngClass]=\\\"{ secondaryTable: isSecondaryTable === true, 'table-scroll-disabled': _isAutoPageSize }\\\">\\n    <table [dataSource]=\\\"_dataSource\\\" mat-table class=\\\"myadminTable mat-elevation-z2 myAdminTableSortingIcons\\\" matSort matSortActive=\\\"\\\">\\n      <div *ngFor=\\\"let column of columns\\\">\\n        <ng-container [matColumnDef]=\\\"column.binding\\\" [sticky]=\\\"column.isSticky === true\\\">\\n          <th *matHeaderCellDef=\\\"let element\\\" mat-header-cell mat-sort-header class=\\\"whiteSplices sortingIconColor\\\">\\n            <mat-checkbox *ngIf=\\\"_isMultiSelect && hasSelectAllCheckbox && column.isSelectAllColumn\\\" (change)=\\\"$event ? selectAllRows() : null\\\" [checked]=\\\"_selection.hasValue() && checkSelected()\\\" [indeterminate]=\\\"_selection.hasValue() && !checkSelected()\\\" class=\\\"selectCheckBox\\\"> </mat-checkbox>\\n            <ng-container *ngIf=\\\"_customColumnHeadersArray[column.headerIndex!]; else rawValue\\\">\\n              <ng-container *ngTemplateOutlet=\\\"_customColumnHeadersArray[column.headerIndex!].template; context: _customColumnHeadersArray[column.headerIndex!].template\\\"> </ng-container>\\n            </ng-container>\\n            <ng-template #rawValue>\\n              <span [class.column-header-text-break-word]=\\\"column.isNoWrap !== true\\\" [class.column-header-text-no-wrap]=\\\"column.isNoWrap === true\\\"\\n                    [ngClass]=\\\"{circleIconSpace: circleIcon === true && column.columnName === columns[0].columnName}\\\">\\n              {{ column.columnName }}</span>\\n              <i *ngIf=\\\"!noSortingIcon\\\" class=\\\"material-icons sort-icon\\\">code</i>\\n              <div *ngIf=\\\"circleIcon && column.columnName === columns[0].columnName\\\" class=\\\"totalCircleIcon\\\">\\n                {{ _dataSource && _dataSource.data ? _dataSource.data.length : '0' }}\\n              </div></ng-template>\\n          </th>\\n          <td mat-cell class=\\\"textOverflow mat-cell-WIP myadminTableDataShift\\\" *matCellDef=\\\"let element\\\">\\n            <div *ngIf=\\\"hasSelectAllCheckbox && column.isSelectAllColumn\\\">\\n              <mat-checkbox (click)=\\\"$event.stopPropagation()\\\" (change)=\\\"$event ? selectRow(element) : null\\\" [checked]=\\\"_selection.isSelected(element)\\\" class=\\\"selectCheckBox\\\"> </mat-checkbox>\\n              <span *ngIf=\\\"column.type === 'String'\\\" class=\\\"column-text\\\">\\n                                {{ element[_localTableName][column.binding]}}\\n                            </span>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'Button'\\\">\\n              <ng-container *ngTemplateOutlet=\\\"buttonColumn; context: { $implicit: { row: element, column: column.binding } }\\\"> </ng-container>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'Date'\\\">\\n              <span class=\\\"column-text\\\" *ngIf=\\\"element[_localTableName][column.binding]\\\">\\n                  {{ element[_localTableName][column.binding] }}\\n              </span>\\n              <span class=\\\"column-text notAvailableText\\\" *ngIf=\\\"!element[_localTableName][column.binding]\\\">\\n                {{_tableDefaultValues.notAvailableText}}\\n              </span>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'Checkbox'\\\">\\n              <ng-container *ngTemplateOutlet=\\\"checkBoxColumn; context: { $implicit: { row: element, column: column.binding } }\\\"> </ng-container>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'String' && !column.isSelectAllColumn\\\">\\n              <span class=\\\"column-text\\\" [ngClass]=\\\"{ 'column-text-title': column.isTitleProperty === true }\\\" *ngIf=\\\"element[_localTableName][column.binding] !== '' && element[_localTableName][column.binding] !== null && element[_localTableName][column.binding] !== undefined\\\">\\n                  {{ element[_localTableName][column.binding] | stringDecode}}\\n              </span>\\n              <span class=\\\"column-text notAvailableText\\\" *ngIf=\\\"element[_localTableName][column.binding] === '' || element[_localTableName][column.binding] === null || element[_localTableName][column.binding] === undefined\\\">\\n                {{_tableDefaultValues.notAvailableText}}\\n              </span>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'Link'\\\">\\n              <a class=\\\"text-link\\\" (click)=\\\"selectAndView(element)\\\">\\n                {{ element[_localTableName][column.binding] | stringDecode }}\\n              </a>\\n            </div>\\n            <div *ngIf=\\\"column.type === 'Custom'\\\">\\n              <ng-container *ngIf=\\\"_customColumnsArray[element[_localTableName][column.binding + '-custom']]; else rawValue\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"\\n                    _customColumnsArray[element[_localTableName][column.binding + '-custom']].template;\\n                    context: {\\n                        $implicit: {\\n                            row: element,\\n                            column: element[_localTableName][column.binding],\\n                            isListView: _isListView,\\n                            isSmall: (_isScreenSmall$ | async)\\n                        }\\n                    }\\\">\\n                </ng-container>\\n              </ng-container>\\n              <ng-template #rawValue>\\n                {{ element[_localTableName][column.binding] }}\\n              </ng-template>\\n            </div>\\n          </td>\\n        </ng-container>\\n      </div>\\n      <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay; sticky: true\\\" class=\\\"myadminTableHeader\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: columnsToDisplay\\\" (dblclick)=\\\"changeTableLayout(row)\\\" (click)=\\\"selectRow(row)\\\" [ngClass]=\\\"{ selectedRow: _selection.isSelected(row) }\\\"></tr>\\n    </table>\\n  </div>\\n</ng-template>\\n\\n<ng-template #myadminListView>\\n  <div class=\\\"innerScrollBox listView\\\">\\n    <table mat-table [dataSource]=\\\"_dataSource\\\" class=\\\"myadminTable mat-elevation-z2 hideListViewSortIcon\\\" matSort>\\n      <ng-container matColumnDef=\\\"ListColumn\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>\\n          <mat-checkbox *ngIf=\\\"_isMultiSelect && hasSelectAllCheckbox\\\" (change)=\\\"$event ? selectAllRows() : null\\\" [checked]=\\\"_selection.hasValue() && checkSelected()\\\" [indeterminate]=\\\"_selection.hasValue() && !checkSelected()\\\" class=\\\"selectCheckBox\\\"> </mat-checkbox>\\n          <span class=\\\"listViewFontSize\\\"> {{ _listViewPageTitle | stringDecode }} </span>\\n        </th>\\n        <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around center\\\"></div>\\n        <td mat-cell class=\\\"textOverflow ListViewBottomPadding\\\" *matCellDef=\\\"let element\\\" [class.noTitlePadding]=\\\"_listViewPageTitle.length <= 0\\\">\\n          <div *ngFor=\\\"let column of columns\\\">\\n            <div *ngIf=\\\"column.isTitleProperty\\\" class=\\\"listViewItem boldTitle\\\">\\n              <mat-checkbox *ngIf=\\\"_isMultiSelect && hasSelectAllCheckbox\\\" (click)=\\\"$event.stopPropagation()\\\" (change)=\\\"$event ? selectRow(element) : null\\\" [checked]=\\\"_selection.isSelected(element)\\\" class=\\\"selectCheckBox\\\"> </mat-checkbox>\\n              <ng-container *ngIf=\\\"_customColumnsArray[element[_localTableName]['titleProperty']]; else rawValue\\\">\\n                <ng-container\\n                  *ngTemplateOutlet=\\\"_customColumnsArray[element[_localTableName]['titleProperty']].template;\\n                      context: {\\n                          $implicit: {\\n                              row: element,\\n                              column: element[_localTableName][column.binding],\\n                              isListView: _isListView,\\n                              isSmall: (_isScreenSmall$ | async)\\n                          }\\n                      }\\\">\\n                </ng-container>\\n              </ng-container>\\n              <ng-template #rawValue>\\n                {{ element[_localTableName][column.binding] | stringDecode }}\\n              </ng-template>\\n            </div>\\n          </div>\\n          <div *ngIf=\\\"!sortListView\\\">\\n            <div *ngFor=\\\"let column of columns\\\">\\n              <div *ngIf=\\\"column.isListView\\\" class=\\\"listViewItem\\\" fxLayout=\\\"row\\\">\\n                <div class=\\\"listViewItemColumn\\\">{{ column.columnName | stringDecode }}:</div>\\n                <div class=\\\"listViewItemData\\\">\\n                  <ng-container *ngIf=\\\"_customColumnsArray[element[_localTableName][column.binding + '-custom']] && column.showCustomInListView === true; else rawValue\\\">\\n                    <ng-container\\n                      *ngTemplateOutlet=\\\"\\n                        _customColumnsArray[element[_localTableName][column.binding + '-custom']].template;\\n                        context: {\\n                            $implicit: {\\n                                row: element,\\n                                column: element[_localTableName][column.binding],\\n                                isListView: _isListView,\\n                                isSmall: (_isScreenSmall$ | async)\\n                            }\\n                        }\\\">\\n                    </ng-container>\\n                  </ng-container>\\n                  <ng-template #rawValue>\\n                    <span *ngIf=\\\"!column.bindingListView\\\" class=\\\"listViewDataStyling\\\">{{ element[_localTableName][column.binding] }}</span>\\n                    <span *ngIf=\\\"column.bindingListView\\\" class=\\\"listViewDataStyling\\\">{{ element[_localTableName][column.bindingListView] }}</span>\\n                  </ng-template>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          <div *ngIf=\\\"sortListView\\\">\\n            <div *ngFor=\\\"let column of _listViewItems\\\">\\n              <div *ngIf=\\\"column.isListView\\\" class=\\\"listViewItem\\\" fxLayout=\\\"row\\\">\\n                <div class=\\\"listViewItemColumn\\\">{{ column.columnName | stringDecode }}:</div>\\n                <div class=\\\"listViewItemData\\\">\\n                  <ng-container *ngIf=\\\"_customColumnsArray[element[_localTableName][column.binding + '-custom']] && column.showCustomInListView === true; else rawValue\\\">\\n                    <ng-container\\n                      *ngTemplateOutlet=\\\"\\n                                                _customColumnsArray[element[_localTableName][column.binding + '-custom']].template;\\n                                                context: {\\n                                                    $implicit: {\\n                                                        row: element,\\n                                                        column: element[_localTableName][column.binding],\\n                                                        isListView: _isListView,\\n                                                        isSmall: (_isScreenSmall$ | async)\\n                                                    }\\n                                                }\\n                                            \\\"\\n                    >\\n                    </ng-container>\\n                  </ng-container>\\n                  <ng-template #rawValue>\\n                    <span *ngIf=\\\"!column.bindingListView\\\" class=\\\"listViewDataStyling\\\">{{ element[_localTableName][column.binding] }}</span>\\n                    <span *ngIf=\\\"column.bindingListView\\\" class=\\\"listViewDataStyling\\\">{{ element[_localTableName][column.bindingListView] }}</span>\\n                  </ng-template>\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </td>\\n      </ng-container>\\n      <tr mat-header-row class=\\\"myadminTableHeader\\\" *matHeaderRowDef=\\\"_columnsToDisplayListView; sticky: true\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: _columnsToDisplayListView\\\" (click)=\\\"selectedRowChange(row)\\\" [ngClass]=\\\"{ selectedRow: _selection.isSelected(row) }\\\"></tr>\\n    </table>\\n  </div>\\n</ng-template>\\n\\n<ng-template #editFormContainer>\\n  <ng-container *ngTemplateOutlet=\\\"toolbarRow\\\"></ng-container>\\n  <ng-container *ngTemplateOutlet=\\\"editFormTemplate\\\"></ng-container>\\n</ng-template>\\n\\n<ng-template #errorView>\\n  <h3 *ngIf=\\\"_showListViewError\\\" class=\\\"errorViewFontSizing\\\">Only support up to 4 list view columns and you've provided.</h3>\\n  <h3 *ngIf=\\\"_showListViewError\\\" class=\\\"errorViewFontSizing\\\">Hey, currently we only support 1 (at minimum and maximum) list view title and you've provided\\n    {{ _listViewPageTitle.length }}. FIX IT AND NEVER DO IT AGAIN! Thanks :)\\n  </h3>\\n</ng-template>\\n\\n<ng-template #toolbarRow>\\n  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"searchPanelBackground toolbar-container toolbar-edit\\\">\\n    <button mat-raised-button (click)=\\\"cancel()\\\" class=\\\"toolbarButton toolbarButtonClean\\\">\\n      <span class=\\\"button-text\\\">{{_tableDefaultValues.closeText}}</span>\\n    </button>\\n    <ng-container *ngTemplateOutlet=\\\"actionToolbarTemplate\\\"></ng-container>\\n  </div>\\n</ng-template>\\n\\n<ng-template #filterRow>\\n  <div *ngIf=\\\"filterTemplate\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\" class=\\\"toolbarRow\\\" [ngClass]=\\\"{ filterRowBackgroundSecondary: isSecondaryTable === true, filterRowBackground: isSecondaryTable === false }\\\">\\n    <ng-container *ngTemplateOutlet=\\\"filterTemplate\\\"></ng-container>\\n  </div>\\n</ng-template>\\n\\n<ng-template #buttonColumn let-row>\\n  <ng-container *ngTemplateOutlet=\\\"buttonColTemplate; context: { $implicit: row }\\\"></ng-container>\\n</ng-template>\\n\\n<ng-template #checkBoxColumn let-row>\\n  <ng-container *ngTemplateOutlet=\\\"checkBoxColTemplate; context: { $implicit: row }\\\"></ng-container>\\n</ng-template>\\n\\n<ng-template #paginator>\\n  <mat-paginator cldatadataLoadingass=\\\"mat-paginator mat-elevation-z2 myadminTablePaginator\\\" [hidePageSize]=\\\"hidePageSize\\\" [pageSize]=\\\"pageSize\\\" (page)=\\\"onPage($event)\\\" [pageIndex]=\\\"pageIndex\\\"></mat-paginator>\\n</ng-template>\\n\";","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import {Meta, Story} from '@storybook/angular/types-6-0';\\nimport {moduleMetadata} from \\\"@storybook/angular\\\";\\n\\nimport { TableComponent } from '../../projects/mya-controls/src/lib/table';\\nimport { CoreModule } from \\\"../../projects/mya-controls/src/lib/core\\\";\\n\\nexport default {\\n  title: 'MyaControls/Table',\\n  component: TableComponent,\\n  decorators: [\\n    moduleMetadata({\\n      imports: [CoreModule],\\n    })]\\n} as Meta;\\n\\nconst Template: Story<TableComponent> = (args: TableComponent) => ({\\n  props: args,\\n});\\n\\nexport const Primary = Template.bind({});\\nPrimary.args = {\\n  isSecondaryTable: false\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Primary\":{\"startLoc\":{\"col\":40,\"line\":16},\"endLoc\":{\"col\":2,\"line\":18},\"startBody\":{\"col\":40,\"line\":16},\"endBody\":{\"col\":2,\"line\":18}}};\n    \nimport {Meta, Story} from '@storybook/angular/types-6-0';\nimport {moduleMetadata} from \"@storybook/angular\";\n\nimport { TableComponent } from '../../projects/mya-controls/src/lib/table';\nimport { CoreModule } from \"../../projects/mya-controls/src/lib/core\";\n\nexport default {\n  title: 'MyaControls/Table',\n  component: TableComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [CoreModule],\n    })]\n} as Meta;\n\nconst Template: Story<TableComponent> = (args: TableComponent) => ({\n  props: args,\n});\n\nexport const Primary = Template.bind({});\nPrimary.args = {\n  isSecondaryTable: false\n};\n\n\n\nPrimary.parameters = { storySource: { source: \"(args: TableComponent) => ({\\n  props: args,\\n})\" }, ...Primary.parameters };","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BaseDirective, StringDecodePipe } from '@mya-controls/core/'\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],declarations: [\n    BaseDirective,\n    StringDecodePipe\n  ], exports: [\n    BaseDirective,\n    StringDecodePipe\n  ]})\n\nexport class CoreModule { }\n","import { OnDestroy, Directive } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive({\n  selector: '[baseDirective]'\n})\n\nexport class BaseDirective implements OnDestroy {\n  ngUnsubscribe = new Subject<void>();\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n","export * from './public-api';\n","/*\n * Public API Surface of mya-controls Table\n */\nexport * from './base-directive';\nexport * from './stringDecode';\n","import { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({\n  name: 'stringDecode'\n})\n\nexport class StringDecodePipe implements PipeTransform {\n  transform(value: string, useLiteral: boolean = false): string {\n    return this.DecodeHtml(value, useLiteral);\n  }\n\n  DecodeHtml(html: string, useLiteral: boolean = false): string {\n    if (html === null || html === undefined) {\n      return '';\n    }\n    const txt = document.createElement('textarea');\n    if (useLiteral) {\n      txt.innerHTML = '<pre class=\"defaultPre\">' + html + '</pre>';\n    } else {\n      txt.innerHTML = html;\n    }\n    return txt.value;\n  }\n}\n","export * from './public-api';\n","/*\n * Public API Surface of mya-controls core\n */\nexport * from './core.module';\nexport * from './directives';\n","import { AfterContentInit, AfterViewChecked, Component, ContentChildren, ElementRef, EventEmitter, Input, isDevMode, OnInit, Output, QueryList, TemplateRef, ViewChild, OnDestroy } from '@angular/core';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { FormBuilder } from '@angular/forms';\nimport { fromEvent, Observable } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { format, parseISO } from 'date-fns';\n\nimport { MyaTableService } from '../services/table.service';\n\nimport { BaseDirective } from '@mya-controls/core/directives';\nimport { ColumnCustomHeaderDirective } from '@mya-controls/table/directives/table-column-custom-header.directive';\nimport { ColumnCustomDirective } from '@mya-controls/table/directives/table-column-custom.directive';\n\nimport { TableColumns } from '@mya-controls/table/types/mya-table-columns';\nimport { ColumnsType } from '@mya-controls/table/types/columns-type';\nimport { TableDefault } from '@mya-controls/table/types/tableDefault';\n\n@Component({\n  selector: 'mya-table',\n  template: (require('./table.component.html').default || require('./table.component.html')).length ? (require('./table.component.html').default || require('./table.component.html')) : '',\n  styles: [(require('./table.component.scss').default || require('./table.component.scss')).length ? (require('./table.component.scss').default || require('./table.component.scss')) : '']\n})\n\nexport class TableComponent extends BaseDirective implements OnInit, AfterContentInit, AfterViewChecked, OnDestroy {\n\n  constructor(private formBuilder: FormBuilder, private elementRef: ElementRef, private myAdminTableService: MyaTableService) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    if ((!this._customColumnsArray || this._customColumnsArray.length === 0) && this.customColumns && this.customColumns.length > 0) {\n      this.cacheRowValues();\n    }\n\n    this._customColumnHeadersArray = this.customColumnHeaders?.toArray() ?? [];\n    this.setCustomHeaderBindings();\n  }\n\n  ngAfterViewChecked(): void {\n    this.calculatePageSize();\n  }\n\n  ngOnInit(): void {\n    this._data = [];\n    this._selection.clear();\n    if (this.dataChange) {\n      this.dataChange.pipe(takeUntil(this.ngUnsubscribe)).subscribe((row) => {\n        if (row) {\n          this.cacheRowValues(row);\n        } else {\n          this.cacheRowValues();\n        }\n      });\n    } else {\n      if (this.editFormTemplate && isDevMode()) {\n        console.warn('rowChanged must be defined if you are using an edit form!');\n      }\n    }\n\n    this.subscribeToCloseEditForm();\n    const checkScreenSize = () => document.body.offsetWidth < 1024;\n    const screenSizeChanged$ = fromEvent(window, 'resize').pipe(debounceTime(500), map(checkScreenSize), takeUntil(this.ngUnsubscribe));\n    this._isScreenSmall$ = screenSizeChanged$.pipe(startWith(checkScreenSize()), takeUntil(this.ngUnsubscribe));\n    const screenSizeChangedPaging$ = fromEvent(window, 'resize').pipe(debounceTime(1000), takeUntil(this.ngUnsubscribe));\n    screenSizeChangedPaging$.subscribe(() => {\n      if (this._isTableView) {\n        this.myAdminTableService.calculationTableSizeSet = false;\n        this.calculatePageSize();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.myAdminTableService.calculationTableSizeSet = false;\n  }\n\n  //Input Properties\n  /* Configured column values for table*/\n  @Input() get p_columnsToDisplay(): string[] {\n    return this.columns.filter((c: TableColumns) => c.isHidden !== true).map((c: TableColumns) => c.binding);\n  }\n  _columnsToDisplayListView = ['ListColumn'];\n\n  @Input() get columnsToDisplay(): any[] {\n    return this.p_columnsToDisplay;\n  }\n  set columnsToDisplay(val: any) {\n    if (val && val.length > 0) {\n      this.columns = val.filter((c: TableColumns) => c.isHidden !== true);\n      this._listViewItems = this.columns.filter((x: TableColumns) => x.isListView === true);\n      if (this._listViewItems.length > 5 && isDevMode()) {\n        this.showErrorView();\n        this._showListViewError = true;\n      }\n      const listViewTitle = this.columns.filter((x: TableColumns) => x.isTitleProperty === true);\n      if (listViewTitle.length > 1 && isDevMode()) {\n        this.showErrorView();\n        this._showListTitleError = true;\n      }\n    }\n  }\n\n  @Input() public get columns(): TableColumns[] {\n    return this._columns.filter((c: TableColumns) => c.isHidden !== true);\n  }\n  set columns(val: TableColumns[]) {\n    if (val) {\n      this._columns = val;\n    }\n  }\n  _columns!: TableColumns[];\n  _listViewItems!: TableColumns[];\n\n  /* Configured page size for table row items*/\n  @Input() get pageSize(): number {\n    return this._pageSize;\n  }\n  set pageSize(val: number) {\n    if (!this._isAutoPageSize) {\n      this._pageSize = val;\n      this.setPaginator(val);\n    }\n  }\n  protected _pageSize = 10;\n\n  /* Configured page index for table row items*/\n  @Input() get pageIndex(): number {\n    return this._pageIndex;\n  }\n  set pageindex(val: number) {\n    this._pageIndex = val;\n    this._dataSource.paginator = this._paginator;\n    if (val && this._dataSource.paginator?.pageIndex) {\n      this._dataSource.paginator.pageIndex = val;\n    }\n  }\n  protected _pageIndex = 0;\n\n  /* Configured autoPageSize for table row items*/\n  @Input() get autoPageSize(): boolean {\n    return this._isAutoPageSize;\n  }\n  set autoPageSize(val: boolean) {\n    if (val) {\n      this._isAutoPageSize = val;\n      this.myAdminTableService.setAutoTableSize(val);\n    }\n  }\n  _isAutoPageSize = false;\n\n  //TODO this should be removed\n  /* Configured hide page size for table*/\n  @Input() get hidePageSize(): boolean {\n    return this._hidePageSize;\n  }\n  set hidePageSize(val: boolean) {\n    if (val) {\n      this._hidePageSize = val;\n    }\n  }\n  protected _hidePageSize = true;\n\n  /* Table data values*/\n  @Input() get datasource(): any {\n    return this._dataSource.data;\n  }\n  set datasource(val: any) {\n    if (val) {\n      this._dataSource.data = val;\n      this.cacheRowValues();\n      this._selection.clear();\n    }\n  }\n  _data: any = [];\n  _dataSource = new MatTableDataSource<any>(this._data);\n  _tempData = new MatTableDataSource<any>();\n\n  /* Text displayed when no data loaded in Table*/\n  @Input() get emptyTableText(): string {\n    return this._emptyTableText;\n  }\n  set emptyTableText(val: string) {\n    if (val) {\n      this._emptyTableText = val;\n    }\n  }\n  _emptyTableText: string = 'No Data Loaded';\n\n  //TODO this should be removed\n  /* Text filtered datasource for data in Table */\n  @Input() get filteredDataSource() {\n    return this._dataSource.filteredData;\n  }\n  set filteredDataSource(val: any) {\n    if (val) {\n      // @ts-ignore\n      val.forEach((row) =>\n        this._dataSource.filteredData.map((item) => {\n          if (item.id === row.id) {\n            this.selectRow(item);\n          }\n        })\n      );\n    }\n  }\n\n  //TODO this should be removed\n  /* setting this to true will enable the ability to show a form in mobile view*/\n  @Input() get mobileForm(): boolean {\n    return this._showEditFormMobile;\n  }\n  set mobileForm(val: boolean) {\n    if (val) {\n      this._showEditFormMobile = val;\n    }\n  }\n  _showEditFormMobile = false;\n\n  /* Text displayed when editing item in list view*/\n  @Input() get pageTitle(): any {\n    return this._listViewPageTitle;\n  }\n  set pageTitle(val: string) {\n    if (val) {\n      this._listViewPageTitle = val;\n    }\n  }\n  _listViewPageTitle: string = '';\n\n  /* hide list view overrides double click */\n  @Input() get disableListView(): boolean {\n    return this._disableListView;\n  }\n  set disableListView(val: boolean) {\n    if (val) {\n      this._disableListView = val;\n    }\n  }\n  protected _disableListView = false;\n\n  //TODO event emitter\n  @Input() get buttonClickListView(): boolean {\n    //TODO ASK JZ\n    return this._disableListView;\n  }\n  set buttonClickListView(val: any) {\n    if (val) {\n      this._buttonClick = val;\n      this.showListView();\n    }\n  }\n\n  /* Allow multiple rows to be selected, default is false */\n  @Input() get multiSelect() {\n    return this._isMultiSelect;\n  }\n  set multiSelect(val: boolean) {\n    this._selection.clear();\n    if (val) {\n      this._originalMultiSelectState = val;\n      this._isMultiSelect = val;\n    }\n  }\n  _isMultiSelect = false;\n\n  /* select all rows in table */\n  @Input() get selectAll(): boolean {\n    return this._isSelectAll;\n  }\n  set selectAll(val: boolean) {\n    if (val) {\n      this._isSelectAll = val;\n      this.selectAllRows();\n    }\n  }\n  protected _isSelectAll = true;\n\n  /* Define custom table name for table default is a random GUID, this is used to avoid 2 table implementation on page with same columns. */\n  @Input() get tableName(): string {\n    if (this._localTableName === undefined) {\n      return this._localTableName;\n    } else {\n      return this._localTableName;\n    }\n  }\n  set tableName(val: string) {\n    if (val) {\n      this._localTableName = val;\n    }\n  }\n  _localTableName: string = this.generateUUID();\n\n  @Input() get tableDefaultValues(): TableDefault {\n    return this._tableDefaultValues;\n  }\n  set tableDefaultValues(values: TableDefault) {\n    this._tableDefaultValues = values;\n  }\n  _tableDefaultValues: TableDefault = new TableDefault();\n\n  /* Open selected item from table rows */\n  @Input() get openSelectedValue() {\n    return this._selectedValue;\n  }\n  set openSelectedValue(val: any) {\n    if (val) {\n      this._selectedValue = val;\n      this._selection.toggle(this._selectedValue);\n      this.showListView();\n    }\n  }\n  protected _selectedValue = null;\n\n  /* Used to notify data cache of date changes */\n  // @ts-ignore\n  @Input() public dataChange: Observable<any>;\n\n  /* Edit form template for editing row item */\n  // @ts-ignore\n  @Input() public editFormTemplate: TemplateRef<any>;\n  /* Action bar template for table */\n  // @ts-ignore\n  @Input() public actionToolbarTemplate: TemplateRef<any>;\n  /* Filter control form template for table data */\n  // @ts-ignore\n  @Input() public filterTemplate: TemplateRef<any>;\n  /* Button Collection template for table */\n  // @ts-ignore\n  @Input() public buttonColTemplate: TemplateRef<any>;\n  /* Checkbox Collection template for table */\n  // @ts-ignore\n  @Input() public checkBoxColTemplate: TemplateRef<any>;\n\n\n  /*  */\n  @Input() hasSelectAllCheckbox = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() noSortingIcon = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() circleIcon = false;\n\n  /*  */\n  @Input() isSecondaryTable = false;\n\n  /*  */\n  //TODO this should be removed, ask why it was added\n  @Input() noSelection = false;\n\n  /* Used to close form on custom action */\n  @Input() public closeListView: EventEmitter<any> = new EventEmitter<any>();\n\n  //TODO rename to close dataLoading and change to event\n  /* Used to show loading indication */\n  @Input() dataLoading: boolean = false;\n\n  @Input() public sortListView = false;\n\n  /* Emitted when a selection has changed from table row */\n  @Output() selectionChange: EventEmitter<any> = new EventEmitter<any>();\n  /* Emitted when a filter value has changed table row */\n  @Output() updateFilterPredicateChange: EventEmitter<MatTableDataSource<any>> = new EventEmitter<MatTableDataSource<any>>();\n  /* Emitted when a multi selection has changed on table rows */\n  @Output() multiSelectionChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n  /* Emitted when a page index has changed */\n  @Output() pageChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n  @ViewChild(MatPaginator) set matPaginator(mp: MatPaginator) {\n    this._paginator = mp;\n    this._dataSource.paginator = this._paginator;\n    this.setDataSourceAttributes();\n  }\n\n  @ViewChild(MatSort) set matSort(ms: MatSort) {\n    this._sort = ms;\n    this._dataSource.sort = this.noSortingIcon ? null : ms;\n    this.setDataSourceAttributes();\n  }\n  @ViewChild('paginator', { static: true })\n\n  @ContentChildren(ColumnCustomDirective) customColumns!: QueryList<ColumnCustomDirective>;\n  @ContentChildren(ColumnCustomHeaderDirective) customColumnHeaders!: QueryList<ColumnCustomHeaderDirective>;\n\n  _isTableView = true;\n  _isListView = false;\n  _isErrorView = false;\n  _showListViewError = false;\n  _showListTitleError = false;\n\n  _buttonClick: any; // value of the button click event passed in by parent component\n  _selection = new SelectionModel<any>(true, []);\n  _lastSelectedRow: [] | undefined; // this is to save the last selected row, so going from table to list view keeps the selected value.\n  _isScreenSmall$!: Observable<boolean>;\n  _originalMultiSelectState = false; //this is the original value passed in by the parent component, this should never change.\n\n  _customColumnsArray!: ColumnCustomDirective[];\n  _customColumnHeadersArray!: ColumnCustomHeaderDirective[];\n\n  _paginator!: MatPaginator;\n\n  private _sort!: MatSort;\n\n  clearSelected(): void {\n    this._dataSource.data = [];\n    this._selection.clear();\n  }\n\n  stringToPath(str: string): string[] {\n    return str.split('.');\n  }\n\n  subscribeToCloseEditForm(): void {\n    if (this.closeListView) {\n      this.closeListView.pipe(takeUntil(this.ngUnsubscribe)).subscribe(() => {\n        this.cancel();\n      });\n    }\n  }\n\n  getVal(columnName: string, row: any): any {\n    if (!row) {\n      return undefined;\n    }\n    if (!columnName) {\n      return '';\n    }\n    const properties = Array.isArray(columnName) ? columnName : columnName.split('.');\n    // @ts-ignore\n    return properties.reduce((prev, curr) => prev && prev[curr], row);\n  }\n\n  //TODO ASK JZ, Remove Not used\n  // isTitleColumn(column: string): boolean {\n  //   return this.columns?.find((c) => c.binding === column)?.isTitleProperty;\n  // }\n\n  selectedRowChange(_selection: any): void {\n    if (!this.noSelection) {\n      this.selectRow(_selection);\n      this.selectionChange.emit(_selection);\n    }\n  }\n\n  selectRow(row: any): void {\n    if (!this.noSelection) {\n      if (row && !this.multiSelect) {\n        if (this._selection.selected.length === 1 && this._selection.selected[0] !== row) {\n          this._selection.toggle(this._selection.selected[0]);\n        }\n        this._lastSelectedRow = row;\n        this._selection.toggle(row);\n      } else if (row && this.multiSelect) {\n        this._lastSelectedRow = row;\n        this._selection.toggle(row);\n      }\n\n      this.multiSelectionChange.emit(this._selection.selected);\n    }\n  }\n\n  selectAllRows(): void {\n    this.checkSelected() ? this._selection.clear() : this._dataSource.filteredData.forEach((row) => this._selection.select(row));\n    this.multiSelectionChange.emit(this._selection.selected);\n  }\n\n  checkSelected(): boolean {\n    const numFiltered = this._dataSource.filteredData.length;\n    const numSelected = this._selection.selected.length;\n    return numSelected === numFiltered;\n  }\n\n  setDataSourceAttributes(): void {\n    this._dataSource.paginator = this._paginator;\n    this._dataSource.sort = this.noSortingIcon ? null : this._sort;\n    this._dataSource.sortingDataAccessor = (item, property) => {\n      return property.split('.').reduce((o, p) => o && o[p], item);\n    };\n    this.updateFilterPredicateChange.emit(this._dataSource);\n  }\n\n  changeTableLayout(row: any): void {\n    this.selectionChange.emit(row);\n    this.showListView();\n  }\n\n  showErrorView(): void {\n    if (isDevMode()) {\n      this._isErrorView = true;\n      this._isListView = false;\n      this._isTableView = false;\n    }\n  }\n\n  showListView(): void {\n    if (!this._disableListView) {\n      this._isErrorView = false;\n      this._isListView = true;\n      this._isTableView = false;\n      if (this._originalMultiSelectState) {\n        this._selection.clear();\n        this._selection.toggle(this._lastSelectedRow);\n        this._isMultiSelect = false;\n      } else {\n        this._selection.toggle(this._lastSelectedRow);\n      }\n      this._tempData.data = this._dataSource.data;\n      const selected = this._selection.selected[0];\n      if (selected) {\n        this._dataSource.data = [selected, ...this._dataSource.data.filter((item) => item !== selected)];\n      }\n    }\n  }\n\n  showTableView(): void {\n    this._dataSource.data = this._tempData.data;\n    if (this._originalMultiSelectState) {\n      this._isErrorView = false;\n      this._isMultiSelect = true;\n      this._isListView = false;\n      this._isTableView = true;\n    } else {\n      this._isErrorView = false;\n      this._isListView = false;\n      this._isTableView = true;\n    }\n  }\n\n  cancel(): void {\n    this.showTableView();\n    this._selection.clear();\n    this._selection.deselect();\n    this.selectionChange.emit(null);\n  }\n\n  selectAndView(row: any): void {\n    this._lastSelectedRow = row;\n    this.selectionChange.emit(row);\n    this.showListView();\n  }\n\n  private cacheRowValues(row: any = null): void {\n    this._customColumnsArray = this.customColumns?.toArray() ?? [];\n    if (row) {\n      this.createCacheBindings(row);\n    } else {\n      for (const dataRow of this._dataSource.data) {\n        this.createCacheBindings(dataRow);\n      }\n    }\n  }\n\n  private createCacheBindings(row: any): void {\n    const columnBindings: any = {};\n    this.setColumnBindings(columnBindings, row);\n    this.setCustomTitleBindings(columnBindings);\n\n    row[this.tableName] = columnBindings;\n  }\n\n  onPage(event: any): void {\n    this.pageChange.emit(event);\n  }\n\n  private setColumnBindings(columnBindings: any, row: any) {\n    if (!this.columns) {\n      return;\n    }\n\n    for (const column of this.columns) {\n      this.setColumnBinding(columnBindings, row, column);\n    }\n  }\n\n  private setColumnBinding(columnBindings: any, row: any, column: any) {\n    columnBindings[column.binding] = this.getVal(column.binding, row);\n\n    if (column.type == ColumnsType.Date) {\n      const date = parseISO(this.getVal(column.binding, row));\n      if (!isNaN(<any>date)) {\n        columnBindings[column.binding] = format(date, column.dateFormat ?? 'MM/dd/yyyy HH:mm:ss');\n      }\n    }\n\n    if (column.bindingListView) {\n      columnBindings[column.bindingListView] = this.getVal(column.bindingListView, row);\n    }\n\n    if (this._customColumnsArray) {\n      const customIndex = this._customColumnsArray.findIndex((c) => c.column === column.binding);\n      if (customIndex > -1) {\n        columnBindings[`${column.binding}-custom`] = customIndex;\n      }\n    }\n  }\n\n  private setCustomTitleBindings(columnBindings: any) {\n    if (this._customColumnsArray) {\n      const titlePropertyIndex = this._customColumnsArray.findIndex((c) => c.column === 'titleProperty');\n      if (titlePropertyIndex > -1) {\n        columnBindings['titleProperty'] = titlePropertyIndex;\n      }\n    }\n  }\n\n  private setCustomHeaderBindings() {\n    if (this._customColumnHeadersArray) {\n      for (const column of this.columns) {\n        const customHeaderIndex = this._customColumnHeadersArray.findIndex((c) => c.column === column.binding);\n        if (customHeaderIndex > -1) {\n          column.headerIndex = customHeaderIndex;\n        }\n      }\n    }\n  }\n\n  //This is a Beta Feature that needs some more calculation logic when tables are not loaded without Toolbars and center aligned.\n  private calculatePageSize() {\n    if (this._isAutoPageSize && !this.myAdminTableService.calculationTableSizeSet && this.elementRef.nativeElement.firstElementChild !== undefined && this.elementRef.nativeElement.firstElementChild !== null && this.elementRef.nativeElement.firstElementChild.scrollHeight > 0) {\n      this.myAdminTableService.calculationTableSizeSet = true;\n      const contentTableHeight = this.elementRef.nativeElement.firstElementChild.scrollHeight;\n      const allowed = Math.round((contentTableHeight / 64) * 0.87);\n      this.pageSize = Math.floor(allowed - (allowed % 2));\n      this.setPaginator(this._pageSize);\n    }\n  }\n\n  private setPaginator(val: number) {\n    if (this._paginator) {\n      this._dataSource.paginator = this._paginator;\n      if (val && this._dataSource.paginator?.pageSize) {\n        this._dataSource.paginator.pageSize = val;\n      }\n    } else if (val && this._dataSource.paginator?.pageSize) {\n      this._dataSource.paginator.pageSize = val;\n    }\n  }\n\n  private generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      // tslint:disable-next-line:no-bitwise\n      const r = (Math.random() * 16) | 0,\n        v = c == 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n","import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: 'column-custom-header'\n})\nexport class ColumnCustomHeaderDirective {\n  @Input() column!: string;\n  // @ts-ignore\n  @ContentChild(TemplateRef, { static: false }) template;\n}\n","import { ContentChild, Directive, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: 'column-custom'\n})\nexport class ColumnCustomDirective {\n  @Input() column!: string;\n  // @ts-ignore\n  @ContentChild(TemplateRef, { static: false }) template;\n}\n","export * from './public-api';\n","/*\n * Public API Surface of mya-controls Table\n */\n\nexport * from './components/table.component';\nexport * from './directives/table-column-custom-header.directive';\nexport * from './directives/table-column-custom.directive';\nexport * from './types/columns-type';\nexport * from './types/mya-table-columns';\nexport * from './table.module';\n","import { Injectable } from '@angular/core';\nimport { Subject} from \"rxjs\";\n\n@Injectable()\nexport class MyaTableService {\n\n  calculationTableSizeSet: boolean = false;\n\n  private isAutoTableSize = new Subject<boolean>();\n  isAutoTableSize$ = this.isAutoTableSize.asObservable();\n\n  public setAutoTableSize(value:boolean){\n    this.isAutoTableSize.next(value);\n  }\n}\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from \"@angular/material/sort\";\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { CoreModule } from '@mya-controls/core';\nimport { TableComponent } from '@mya-controls/table/components/table.component';\nimport { MatButtonModule } from \"@angular/material/button\";\n\n\n@NgModule({\n  declarations: [\n    TableComponent\n  ],\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    CoreModule,\n    MatSortModule,\n    MatButtonModule,\n    FlexLayoutModule\n  ],\n  exports: [\n    TableComponent,\n    MatTableModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    FlexLayoutModule\n  ]\n})\nexport class TableModule { }\n\n","export enum ColumnsType {\n  Checkbox = 'Checkbox',\n  Date = 'Date',\n  String = 'String',\n  Button = 'Button',\n  Link = 'Link',\n  Custom = 'Custom'\n}\n","import {ColumnsType} from './columns-type';\n\nexport class TableColumns {\n  public binding: string = '';\n  public columnName: string = 'NotSet';\n  public type: ColumnsType = ColumnsType.String;\n  public isListView?: boolean;\n  public showCustomInListView?: boolean;\n  public isTitleProperty?: boolean;\n  public link?: boolean;\n  public listViewOrder?: number;\n  public dateFormat?: string;\n  public bindingListView?: string;\n  public isSelectAllColumn?: boolean;\n  public isHidden?: boolean;\n  public isSticky?: boolean;\n  public isNoWrap?: boolean;\n  public isCustomColumnHeader?: boolean = false;\n  public headerIndex?: number;\n}\n","export class TableDefault {\n  public closeText: string = 'Close';\n  public notAvailableText: string = 'Not Available';\n}\n"],"names":[],"sourceRoot":""}